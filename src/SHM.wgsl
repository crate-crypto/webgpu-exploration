const size: i32 = 384; // 32*12 this constant expression is not supported

const SHMData = array<u32, size>(
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,  
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000001u, 0x8508C000u, 0x30000000u, 0x170B5D44u, 0xBA094800u, 0x1EF3622Fu,
  0x00F5138Fu, 0x1A22D9F3u, 0x6CA1493Bu, 0xC63B05C0u, 0x17C510EAu, 0x01AE3A46u,
  0x00000002u, 0x0A118000u, 0x60000001u, 0x2E16BA88u, 0x74129000u, 0x3DE6C45Fu,
  0x01EA271Eu, 0x3445B3E6u, 0xD9429276u, 0x8C760B80u, 0x2F8A21D5u, 0x035C748Cu,
  0x00000003u, 0x8F1A4000u, 0x90000001u, 0x452217CCu, 0x2E1BD800u, 0x5CDA268Fu,
  0x02DF3AADu, 0x4E688DD9u, 0x45E3DBB1u, 0x52B11141u, 0x474F32C0u, 0x050AAED2u,
  0x00000004u, 0x14230000u, 0xC0000002u, 0x5C2D7510u, 0xE8252000u, 0x7BCD88BEu,
  0x03D44E3Cu, 0x688B67CCu, 0xB28524ECu, 0x18EC1701u, 0x5F1443ABu, 0x06B8E918u,
  0x00000005u, 0x992BC000u, 0xF0000002u, 0x7338D254u, 0xA22E6800u, 0x9AC0EAEEu,
  0x04C961CBu, 0x82AE41BFu, 0x1F266E27u, 0xDF271CC2u, 0x76D95495u, 0x0867235Eu,
  0x00000006u, 0x1E348000u, 0x20000003u, 0x8A442F99u, 0x5C37B000u, 0xB9B44D1Eu,
  0x05BE755Au, 0x9CD11BB2u, 0x8BC7B762u, 0xA5622282u, 0x8E9E6580u, 0x0A155DA4u,
  0x00000007u, 0xA33D4000u, 0x50000003u, 0xA14F8CDDu, 0x1640F800u, 0xD8A7AF4Eu,
  0x06B388E9u, 0xB6F3F5A5u, 0xF869009Du, 0x6B9D2842u, 0xA663766Bu, 0x0BC397EAu,
  0x00000008u, 0x28460000u, 0x80000004u, 0xB85AEA21u, 0xD04A4000u, 0xF79B117Du,
  0x07A89C78u, 0xD116CF98u, 0x650A49D8u, 0x31D82E03u, 0xBE288756u, 0x0D71D230u,
  0x00000009u, 0xAD4EC000u, 0xB0000004u, 0xCF664765u, 0x8A538800u, 0x168E73ADu,
  0x089DB008u, 0xEB39A98Bu, 0xD1AB9313u, 0xF81333C3u, 0xD5ED9840u, 0x0F200C76u,
  0x0000000Au, 0x32578000u, 0xE0000005u, 0xE671A4A9u, 0x445CD000u, 0x3581D5DDu,
  0x0992C397u, 0x055C837Eu, 0x3E4CDC4Fu, 0xBE4E3984u, 0xEDB2A92Bu, 0x10CE46BCu,
  0x0000000Bu, 0xB7604000u, 0x10000005u, 0xFD7D01EEu, 0xFE661800u, 0x5475380Cu,
  0x0A87D726u, 0x1F7F5D71u, 0xAAEE258Au, 0x84893F44u, 0x0577BA16u, 0x127C8103u,
  0x0000000Cu, 0x3C690000u, 0x40000006u, 0x14885F32u, 0xB86F6001u, 0x73689A3Cu,
  0x0B7CEAB5u, 0x39A23764u, 0x178F6EC5u, 0x4AC44505u, 0x1D3CCB01u, 0x142ABB49u,
  0x0000000Du, 0xC171C000u, 0x70000006u, 0x2B93BC76u, 0x7278A801u, 0x925BFC6Cu,
  0x0C71FE44u, 0x53C51157u, 0x8430B800u, 0x10FF4AC5u, 0x3501DBECu, 0x15D8F58Fu,
  0x0000000Eu, 0x467A8000u, 0xA0000007u, 0x429F19BAu, 0x2C81F001u, 0xB14F5E9Cu,
  0x0D6711D3u, 0x6DE7EB4Au, 0xF0D2013Bu, 0xD73A5085u, 0x4CC6ECD6u, 0x17872FD5u,
  0x0000000Fu, 0xCB834000u, 0xD0000007u, 0x59AA76FEu, 0xE68B3801u, 0xD042C0CBu,
  0x0E5C2562u, 0x880AC53Du, 0x5D734A76u, 0x9D755646u, 0x648BFDC1u, 0x19356A1Bu,
  
  0xFFFFFF68u, 0x02CDFFFFu, 0x7FFFFFB1u, 0x51409F83u, 0x8A7D3FF2u, 0x9F7DB3A9u,     // R mod N      <-- index 16
  0x6E7C6305u, 0x7B4E97B7u, 0x803C84E8u, 0x4CF495BFu, 0xE2FDF49Au, 0x008D6661u,
  
  0x9400CD22u, 0xB786686Cu, 0xB00431B1u, 0x0329FCAAu, 0x62D6B46Du, 0x22A5F111u,     // R^2 mod N
  0x827DC3ACu, 0xBFDF7D03u, 0x41790BF9u, 0x837E92F0u, 0x1E914B88u, 0x006DFCCBu,

  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,    
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,    
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,    
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,    
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
  0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
);

fn copyToShared(data: array<vec4<u32>, 96>, thread: Thread) { // +
  var data_copy = data;
  var counter = thread.blockDim.x;
  if counter == 0u {
    counter++;
  }

  for(var i = thread.threadIdx.x; i<32u;i+=counter) {
    store_shared_u4(i, data_copy[i*3u + 0u]);
    store_shared_u4(i + 4u, data_copy[i*3u + 1u]);
    store_shared_u4(i + 8u, data_copy[i*3u + 2u]);
  }
}
